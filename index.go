package main

import (
	"encoding/hex"
	"fmt"
)

func main() {
	str := []byte{0xc0, 0x72, 0x94, 0x18, 0xbf, 0x48, 0x0f, 0x03, 0x00, 0x41, 0x5e, 0x5e, 0xce, 0xb7, 0x99, 0x22, 0xee, 0xf2, 0x1b, 0xec, 0x3d, 0x8a, 0x0e, 0x50, 0x2f, 0xec, 0xb0, 0xc8, 0x57, 0x68, 0xf2, 0xf2, 0xdc, 0x42, 0xfa, 0x08, 0x89, 0x42, 0xa5, 0x82, 0x72, 0x42, 0xde, 0x95, 0x21, 0x50, 0x9a, 0x3a, 0x72, 0x73, 0xfa, 0xa2, 0x42, 0x5c, 0x37, 0xa9, 0x2e, 0x6f, 0x2e, 0x25, 0x6c, 0x1d, 0x30, 0xb2, 0x6e, 0xe7, 0x8c, 0x63, 0xc5, 0x8c, 0x2c, 0x68, 0x61, 0x06, 0x4b, 0x5d, 0x03, 0x8a, 0x9e, 0x02, 0x7d, 0x84, 0x64, 0x48, 0x51, 0x2e, 0x6a, 0x97, 0xce, 0xdc, 0x35, 0xf2, 0x39, 0x93, 0xbd, 0xd2, 0x70, 0x7f, 0x5f, 0xef, 0xbb, 0xa2, 0x2e, 0x1c, 0xb6, 0xa8, 0x4f, 0xa0, 0xfd, 0x69, 0x0d, 0x94, 0xe5, 0x90, 0x01, 0x46, 0x78, 0x68, 0x40, 0xdc, 0x0b, 0xc5, 0x36, 0xad, 0x6a, 0xfb, 0x6e, 0x4e, 0x32, 0x67, 0xfb, 0x04, 0x5d, 0xd9, 0xc7, 0xe6, 0x70, 0xf1, 0xc4, 0xc3, 0xd2, 0xac, 0x1f, 0xcc, 0x71, 0xad, 0x06, 0xb7, 0xb1, 0x94, 0xde, 0x40, 0x31, 0xf4, 0x04, 0x67, 0x44, 0x61, 0x0a, 0xaf, 0xa7, 0xb9, 0xfe, 0xaf, 0x26, 0x02, 0x62, 0x8e, 0x33, 0xec, 0x0b, 0xa2, 0x62, 0x9b, 0xc1, 0x56, 0xd9, 0x80, 0x92, 0xfa, 0x54, 0x97, 0x42, 0x21, 0xec, 0x91, 0x02, 0x90, 0xdf, 0xdd, 0xd2, 0x8a, 0xe7, 0x54, 0x10, 0x41, 0x88, 0xfb, 0xde, 0xd9, 0x5b, 0x0c, 0x28, 0x15, 0x55, 0x26, 0x83, 0xa7, 0xc8, 0xe9, 0x38, 0x41, 0x8b, 0x57, 0x8c, 0x5c, 0x00, 0x1e, 0x0c, 0xc4, 0xc4, 0x1d, 0xf1, 0xeb, 0x3a, 0x8d, 0x93, 0x09, 0x52, 0x2d, 0xf6, 0xc5, 0xc4, 0xc3, 0x0a, 0x54, 0x2c, 0x92, 0x55, 0x85, 0x96, 0x87, 0xc1, 0x9d, 0xec, 0xb0, 0xc8, 0x57, 0x68, 0xf2, 0xf2, 0xdc, 0xec, 0xb0, 0xc8, 0x57, 0x68, 0xf2, 0xf2, 0xdc, 0x82, 0xe7, 0x15, 0xe7, 0x95, 0x2a, 0x79, 0xc4, 0xc4, 0xe2, 0xaa, 0xf1, 0xe3, 0x61, 0xd6, 0x20, 0xe9, 0x39, 0x69, 0xb0, 0xa8, 0xdd, 0x63, 0x00, 0xc4, 0xc3, 0xc8, 0xb0, 0x08, 0x12, 0x8d, 0xf0, 0xaf, 0x80, 0xfe, 0xce, 0x91, 0x74, 0x1f, 0xc5, 0xf6, 0x41, 0x11, 0x45, 0xaa, 0xb3, 0x5a, 0xc9, 0xf6, 0xe0, 0xf8, 0xa9, 0x37, 0xba, 0xed, 0x01, 0x2d, 0x00, 0xde, 0x38, 0x6a, 0xaf, 0x6c, 0x5f, 0x2a, 0x2c, 0x04, 0x95, 0xb6, 0x43, 0x17, 0x70, 0xa6, 0xdd, 0xf7, 0xb3, 0x2a, 0xcd, 0x33, 0xd6, 0xdb, 0x83, 0x9d, 0x82, 0xbf, 0x8d, 0xcf, 0xb8, 0xe5, 0x1d, 0xda, 0x62, 0xa1, 0x08, 0xe5, 0x4c, 0x9c, 0x66, 0x3f, 0x53, 0x3c, 0x1a, 0x5a, 0xd6, 0xce, 0xeb, 0x75, 0x02, 0xd3, 0xcb, 0xe2, 0x43, 0x7a, 0x3d, 0xc2}

	if str[0] != 0xc0 { //неизвестный пакет
		return
	}

	/*байт-стаффинг*/
	chiper := []byte{}
	for i := 1; i < (len(str) - 1); i++ {
		if str[i] == 0xc4 {
			switch str[i+1] {
			case 0xC1:
				chiper = append(chiper, 0xC0)
				break
			case 0xc3:
				chiper = append(chiper, 0xC2)
				break
			case 0xc4:
				chiper = append(chiper, 0xC4)
			}
			i++
		} else {
			chiper = append(chiper, str[i])
		}
	}
	/*байт-стаффинг*/

	imei := chiper[0:8]

	testKey := []byte("yuyuyuyuopopopop")
	original := chiper[8:]

	if len(original)%8 != 0 {
		for len(original)%8 != 0 {
			original = append(original, 0x00)
		}
	}

	decription := []byte{}
	block := make([]byte, 8)
	for i := 0; i < len(original)/8; i++ {
		block = decrypt(testKey, original[(i*8):((i+1)*8)], 32)
		decription = append(decription, block...)
	}

	encription := []byte{}
	block1 := make([]byte, 8)
	for i := 0; i < len(original)/8; i++ {
		block1 = encrypt(testKey, decription[(i*8):((i+1)*8)], 32)
		encription = append(encription, block1...)
	}
	//fmt.Println(hex.Dump(encription))

	//checkSum := crc16.ChecksumCCITT(decription[len(decription)-3 : len(decription)-1])
	//fmt.Println(hex.Dump(decription))

	/*
		decripttion[0] - идентификатор данных
		decripttion[1] - кол-во параметров
		decripttion[2] - номер параметра
		decripttion[3] - длина данных
	*/

	/*i := 3
	for i1 := 0; i1 < int(decription[1]); i1++ {
		fmt.Println("Номер параметра ", int(decription[i-1]), ", длина данных ", int(decription[i]))
		end := []byte{}
		for i2 := 0; i2 < int(decription[i]); i2++ {
			end = append(end, decription[i2+i+1])
		}
		fmt.Println(hex.Dump(end))
		i += int(decription[i] + 2)
	}*/

	demoIni := []byte{}
	demoIni = append(demoIni, imei...)
	demoIni = append(demoIni, encription...)

	/*обратный байт-стаффинг*/
	initial := []byte{}
	initial = append(initial, 0xc0)
	for i := 0; i < len(demoIni); i++ {
		switch demoIni[i] {
		case 0xC0:
			initial = append(initial, 0xC4)
			initial = append(initial, 0xC1)
			break
		case 0xC2:
			initial = append(initial, 0xC4)
			initial = append(initial, 0xC3)
			break
		case 0xC4:
			initial = append(initial, 0xC4)
			initial = append(initial, 0xC4)
			break
		default:
			initial = append(initial, demoIni[i])
		}
	}
	initial = append(initial, 0xc2)
	/*обратный байт-стаффинг*/

	fmt.Println(hex.Dump(initial))
}
